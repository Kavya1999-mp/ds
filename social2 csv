import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn import metrics
from matplotlib.colors import ListedColormap

# -------------------------------
# STEP 1: Import the dataset
# -------------------------------
df = pd.read_csv('Social_Networks_Ads.csv')
print(df.head())
print("Dataset shape:", df.shape)

# Select relevant features and target
# Age and EstimatedSalary are features
# Purchased is the target
X = df.iloc[:, [2, 3]].values      # Columns: Age, EstimatedSalary
Y = df.iloc[:, 4].values           # Target: Purchased

# -------------------------------
# STEP 2: Split into train & test
# -------------------------------
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size=0.25, random_state=0)
print("Training data:", X_Train.shape)
print("Test data:", X_Test.shape)

# -------------------------------
# STEP 3: Feature Scaling
# -------------------------------
sc = StandardScaler()
X_Train = sc.fit_transform(X_Train)
X_Test = sc.transform(X_Test)

# -------------------------------
# STEP 4: Linear Kernel SVM
# -------------------------------
classifier_linear = SVC(kernel='linear', random_state=0)
classifier_linear.fit(X_Train, Y_Train)
Y_Pred_linear = classifier_linear.predict(X_Test)

print("\nAccuracy Score (Linear Kernel):", metrics.accuracy_score(Y_Test, Y_Pred_linear))

# Plotting decision boundary for Linear Kernel
plt.figure(figsize=(6,4))
plt.scatter(X_Test[:, 0], X_Test[:, 1], c=Y_Test, cmap=ListedColormap(('red','green')), edgecolors='k')
# Extract coefficients
w = classifier_linear.coef_[0]
a = -w[0] / w[1]
xx = np.linspace(-2.5, 2.5)
yy = a * xx - (classifier_linear.intercept_[0]) / w[1]
plt.plot(xx, yy, 'b--')
plt.title('SVM Decision Boundary (Linear Kernel)')
plt.xlabel('Age (scaled)')
plt.ylabel('Estimated Salary (scaled)')
plt.show()

# -------------------------------
# STEP 5: RBF Kernel SVM
# -------------------------------
classifier_rbf = SVC(kernel='rbf', random_state=0)
classifier_rbf.fit(X_Train, Y_Train)
Y_Pred_rbf = classifier_rbf.predict(X_Test)
print("\nAccuracy Score (RBF Kernel):", metrics.accuracy_score(Y_Test, Y_Pred_rbf))

# Visualization for RBF Kernel
plt.figure(figsize=(6,4))
X1, X2 = np.meshgrid(
    np.arange(start=X_Test[:, 0].min()-1, stop=X_Test[:, 0].max()+1, step=0.01),
    np.arange(start=X_Test[:, 1].min()-1, stop=X_Test[:, 1].max()+1, step=0.01)
)
plt.contourf(X1, X2, classifier_rbf.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha=0.75, cmap=ListedColormap(('red', 'green')))
plt.scatter(X_Test[:, 0], X_Test[:, 1], c=Y_Test, edgecolors='k')
plt.title('SVM Decision Boundary (RBF Kernel)')
plt.xlabel('Age (scaled)')
plt.ylabel('Estimated Salary (scaled)')
plt.show()

# -------------------------------
# STEP 6: Polynomial Kernel SVM
# -------------------------------
classifier_poly = SVC(kernel='poly', degree=4, random_state=0)
classifier_poly.fit(X_Train, Y_Train)
Y_Pred_poly = classifier_poly.predict(X_Test)
print("\nAccuracy Score (Polynomial Kernel, degree=4):", metrics.accuracy_score(Y_Test, Y_Pred_poly))

# Visualization for Polynomial Kernel
plt.figure(figsize=(6,4))
plt.contourf(X1, X2, classifier_poly.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha=0.75, cmap=ListedColormap(('red', 'green')))
plt.scatter(X_Test[:, 0], X_Test[:, 1], c=Y_Test, edgecolors='k')
plt.title('SVM Decision Boundary (Polynomial Kernel, degree=4)')
plt.xlabel('Age (scaled)')
plt.ylabel('Estimated Salary (scaled)')
plt.show()

# -------------------------------
# STEP 7: Summary
# -------------------------------
print("\n--- Summary ---")
print("Linear Kernel Accuracy :", metrics.accuracy_score(Y_Test, Y_Pred_linear))
print("RBF Kernel Accuracy    :", metrics.accuracy_score(Y_Test, Y_Pred_rbf))
print("Poly Kernel Accuracy   :", metrics.accuracy_score(Y_Test, Y_Pred_poly))


************************************************************************************************************


output

 User ID  Gender  Age  EstimatedSalary  Purchased
0  15624510    Male   19            19000          0
1  15810944    Male   35            20000          0
2  15668575  Female   26            43000          0
3  15603246  Female   27            57000          0
4  15804002    Male   19            76000          0
Dataset shape: (50, 5)
Training data: (37, 2)
Test data: (13, 2)

Accuracy Score (Linear Kernel): 0.9230769230769231


Linear Kernel Accuracy : 0.9230769230769231
RBF Kernel Accuracy    : 0.9230769230769231
Poly Kernel Accuracy   : 0.9230769230769231
