import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

data = {
    'label': ['ham', 'spam', 'ham', 'ham', 'spam', 'ham', 'spam', 'ham'],
    'message': [
        "Hello, how are you?",
        "Congratulations! You've won a lottery of $1000!",
        "Don't forget our meeting tomorrow.",
        "Your subscription is renewed.",
        "Click here to claim your prize!",
        "See you at the gym later.",
        "Limited time offer! Get your discount now!",
        "Have a great day!"
    ]
}

df = pd.DataFrame(data)
X = df['message']
y = df['label']

# Split dataset into train and test sets (50% test size)
x_train, x_test, y_train, y_test = train_test_split(
    X, y, test_size=0.5, random_state=42, stratify=y
)

# Convert text data into numeric feature vectors
vectorizer = CountVectorizer()
x_train_vectorized = vectorizer.fit_transform(x_train)
x_test_vectorized = vectorizer.transform(x_test)

# Train Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(x_train_vectorized, y_train)

# Predict on test data
y_pred = model.predict(x_test_vectorized)

# Evaluate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Optional: detailed classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Predict a new message
new_message = ['how are you']
new_message_vectorized = vectorizer.transform(new_message)
new_pred = model.predict(new_message_vectorized)
print(f"\nPredicted label for new message: {new_pred[0]}")


######################################################

output



Accuracy: 50.00%

Classification Report:
              precision    recall  f1-score   support

         ham       0.67      0.67      0.67         3
        spam       0.00      0.00      0.00         1

    accuracy                           0.50         4
   macro avg       0.33      0.33      0.33         4
weighted avg       0.50      0.50      0.50         4


Predicted label for new message: ham
